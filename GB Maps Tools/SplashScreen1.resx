<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/7gAOQWRvYmUAZAAAAAAB/9sAQwAGBAQEBQQGBQUGCQYFBgkLCAYG
        CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8f/9sAQwEHBwcNDA0YEBAY
        GhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA
        +gHCAwERAAIRAQMRAf/EABwAAQACAwEBAQAAAAAAAAAAAAADBAECBQYHCP/EAEEQAAICAAMFBQQIBAQG
        AwAAAAABAgMRIQQxQVESBWFxIjITgdFSI5GhscFCYhQG8OFyM5JDJBWCorJTYzTx0vL/xAAYAQEBAQEB
        AAAAAAAAAAAAAAAAAQIDBP/EABsRAQEBAQEBAQEAAAAAAAAAAAABEQISMSFR/9oADAMBAAIRAxEAPwD8
        zUTc2pRztSwa+OPDvMiaVKthH034ttE+D+B/cFQOMc5tcsJvluj8E9zCN1CUouDWNteztQVtThy4PPk+
        uD9zAr6zT8s+xliKJQAAAAAAAAAAAGUsQNtiAwouT7ANnujFd3aBZhTHTx57c7d0fh/mQV7LJ2zwWbYB
        8tf5rPqRRooznLLGUmBv4K+E5/UgI3JyeLeLAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACeEnVJNP
        GD2SIOpRZCcXPDGL/vQW3+uPat5lW+poabuSU/D86K/HB7JrtQghjCUGsHzSrXNW906/5FG0oqEo2wWM
        Xml2PzIDe+j1NO9/JhhJfC1jH6iDjWx5Z95tEYAAAAAAAAABkDdRwQGEnN4LYBtg21XWm28lhtbAuRqr
        0ceaeEr2vZH+Zn6Kjdl8m9kVtb2LvKMSsjFctftnvZQrobjzzfJX8T39wCdyw5Klyw3ve+8CIAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABZlCVTaaxre1feiDem2WnnGcXjW/LJbgO3pLISjHBqMMfC90JPd
        /RLYYqtLtLKqaUFyJyxpb/y7N8H+WW4ujWEIyXL5YzfhT2xmtsQNtOknySeHLiv+FvP/AAsDm9S0jrsk
        sMMM0WVFBRRoMEBnADGADBAY5QMNNAYAASwhgsWAwc5csfaBvGuUpRqqXNOXDeQXXGnQVvNS1L80lml2
        In1VJqVuNtz5a93F9xUauU7Wq6o4R/DBZ/TxKJPTp0+dmFlv/bXlX9T+4ggststljJ48FuXcUagYAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW6Lo4crXND4d8e1EEk6XV4ofMpntS2P+YEmmvenkmnzUSyx
        f2MlV6HTqrU0+lLGcZrCPFr4cfij+F7zFFeenlCUo2PhzTX4l+G1fZIozOuWKs5cZxeE48f/ANIDTqOl
        VumViWLjk+1bmJR52cOWTXA2jXABgAwAYAYwAxgUYccQN6qW3i/KiDaWMpckAJadPOc1TTHnnLh/GwC5
        dZR06t11NWameU7F9kewn1VCaUH6mo8Vj2Vf/YqFdF2pbtskq6lk7JZRXYkvuAzPU11x9PTJxTylY/PL
        3IYKz7foKMYgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANotp4p4S3AXNLqXF8rW3zVvJS9zJY
        LEqFyu2jx1vK2t7V3riRU/T9T+nksW5aeWWOxxfDsa3EsHplVHWUpxcfXguaMtzx2vulskuOZj4qqqks
        pJpJNSi9vKsnF9sPsKN6aVjKiflksuGD4e37SDzXU9JKi9prDB4HSVFPlKhygOUDDiBq4gY5QNqqnOQF
        iawwrhtIN9LobbbPRojzTec5bkt7b3IWqtX6irSRej0PzNRPK65b+7hFEwc1yVc8K/m6qWXOs0nwjxfa
        aRJ+mq0/zNY/Uuef6dPNP873dw0QX33XYObShHKEVlFL8qAgclu+kowAAwAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAN4y47OIF7SaicJKWPYp7U1wlxRmwdH0YXJ20Jc2HzaG8muKIq50nXS004xlJ+i3
        4ZPbCXCRLB6S/TRur/VVZYYeokscMNku3BfSu1HPVVfQeCaWcM0nw3r+NxRQ/cPT/V08dTBbVhLvWw1z
        SvMchtk5AMcgGHADRwKCrcmkkBa9P0oqEVjZIip9F066+z068MdttsvLFb22S0S6rV1VVS0fT3y1L/2d
        XL8T/jYkJP6ObVVZepV6f5dC/vameWP9T+5FRt6tWnTr0abs/HqJeZ/0/CvrApznGL+OX1fzKI3zyzl9
        LKNcls+kABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgTVycdmzetxBe0molCScG04vFLHN
        dsWSxXYqjXrI81eCvawlHZGzsw3Mz8HY6D1CWmujTdjyY8qlLJxePll9zM9RY7t+hUHGyr+zLy/lfDL+
        PqMaqKWhV1Vmnw8Nibh2S4fSNHhNbopUamyuSwweR2lZQ+kUYdTA1lWBG63jsAt06f0oc8ljOXkiQW9F
        0yy+UpNqEYrG++XlhH3ktGvUNdTGj9NpcatDjm1/cvlsx7hIKX6NKMZ61enUnjVo4ZSfbLh7cy6IdZqu
        aKhLCFcPJRDJL3d7zLIKEnZNYeSvh/G0qNMYR2ZviyjRtvNgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA2igN0QSwYF/S6hxksXg+PHvJVej0ltWsio2NRvwwU3skuEsPtOd/Feo6Dq3F/odYnyvK
        EntXBY8eDMdRY6tnTp1z5MMXthLjwM6rzf7q6G3bDVwj4bPN2M3x0zY4v+0v0FPDsfsNaIJ9Ow3F1Fee
        gZdG+n6Y87ZrwR2Li+AtF7TdLdnPfqJelTD+5Y/wr4YrfJmbVQa7UT1LWk0lXLRXmqccEvz3S49hYKUl
        RpG7FJW6nfqJLJYbq4/y+gv1HPnK+6TcE1vdj2mhWlXVX/5J/UEVr1NvGWS4FEOK3IoYgYAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3jsA3RBJFAT1kHS6fZOMlyvJPHD3EqvadJ1NWqhGq98s45V
        2cOx9hysV7jpMZX1rSanK6P9mb2Nd/acq0s63oi1OksqlHxLxR/qW0k6HnP9kw0tsXHOLx+k36Ry9R0t
        JvI1KK9fRXbPDDCK2vsL6F+PRK41+rd4KK/Kt77sd/2GfRjl9Sqsvwcv9PpKn8qEcnh+XHe/jZqI4l0b
        JQdOlqUKE8W9kceLe99psUpaKCfM07575bIL2suoq3pN8s5c3/jrWRRTsjPNRSguG8opXQwWLxfaVFYo
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZA3QG6TIJIICeCILulfLJEqvTdJ1FcpRU8u0x
        VfROhW81cIWPnrXlsXmizh01HudHR68Fjg7EvMtklxOVaUdd0Jxleox8NkeZews6THldX0uz1nBRxeOC
        R0lRao6TDT1KVkW9/Itsn7iaKmq087pZxU2sox/BH3lg4+t6Ri3O75k9qTxw9iWbNSo5Gs6ZbKOVfhWz
        nyS7orL6Tco5V/Tm14nK2XBJ4L2R95rUc3U6eFUWpclS+GUkv+nEsRyNTdpVivV5vywWC+vE1BzrrYSx
        5YvvZpFUowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlbQJEQbxAmguwCxXHsIq5TBZEHZ
        6dTLFNMzVez6HqNTQ4uOw5dRY+l/tnqtNkows8Esu7E4dRqPo+m6DXrdOpwSllu7ThesaxwdV+zvRlO2
        cMZNvlRudpjz+v6TTXKUr7IxW9NpZG5RxNXqek0LDnc8MkoJ/aakqOBr+t6OuL9HTSk/8K+x/abnKa8h
        1Xr3UJSbrqrr4S5U5L/ik2dZzE15TqPUup3Sat1EmnudmX0ROkkZca2OLbco48cG/tNCtP8ArfsyKiGW
        HFsCIowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmO0CeMMSCaFKYFmrT175Jd7XvIq5Rp
        9K3h6ib4JSZNHV0uhobXy7H2pYL68DNqvVdI6LGfLhRN97x/6cTnelx7bpX7bxUcalDtlJnK9Lj2XROj
        9PolF2OLfBY/ecuuq1H0fonVun6OMKo4Jyywx3HDqWtRW/deqndTKWns5U1sLxCvjX7g1GuhbJTT70er
        livKarWTbeLf0s6SMuXqLVJPN/SaHnepqOecvpRuI81rOXm80vqNxFGeHxM0iGSXxARvvKIgAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGVtAsVx5nh4pdiRBcp0TlhjBR7bJpfVkTVdTRdK5mvL3x
        ry/xTaRm0d3TaTRVpRla5S3xUnNf4a+VfWYtV3tBHR0pSrojW99k+WP1LP8A5jFV6DRdWrguaLx4z8i+
        l+JmbFdrSdUsnBYPli9mWGPdH72YsV0F1haaLk5ZonkOn/ui6Wp9SU9+XcLya9VV11XqyqcsUs/Yzn5X
        Xn+t087cWk8c447H/M3yleI6noouUuRYS+F7TrKjz2qonHHI3Eed6n6meTNxHmtXNuR0iKM2VEbYGjZR
        GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzHagLtVkcNspdiyX1EF7T22J/LjGD+LDF/S
        /eZqr9dkdt1jl+XHH6thB0dNqLMMaoqqtf5kvu/kZsVc0+qdk1GlPUW77J+Vdy95LB2NFd8zzfqL8cOb
        bCL4RW99hmq7lPUVU+Xn5rX5pY5L+P8A47cYqHU9Tdr5Yvwr62WREmm1fK8cRYPQ6bqzq1Vc2/DJJS7n
        kc7Fdyd8NRW6JvPDGuXYZV5zX080pQtynHZP3+83Eea6m5QcozWa37zpEeX11ibeOw3EeT6lXy3Nrys6
        RHOmaRGwNJbCjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlRb2LEC1TKMUsc2ty95Bdo
        V1ixXgh8TyX1kVZru09WCrj6tm6UvKu1R95B0KqrLF6+us5Kl+F7cOCMjoae2y1wppg66p+WpPlnNfFO
        T8kO1kqrj19emgqqWpWYcspxWCwb8sFuj9u1kwRz6q4LkUsZPzPt4ewYLOl1yazZLB0K9Utz3ExV6Wux
        UM92BnB6Lp3Unfo4SUvmV5Yv6jFirmslDWab1I5WxWe/sZJ+DyHUrIyUq7fDyZY7XD3w+w6xHlOo1ThY
        4yWDeaazTXFM6RHB6nUvSbeTWw1EcKbw2m0RsDSXAo1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAATQrts2ZR3vYkQTVuilYr5kvifl9nEC1TDU6qaWyK37El9iIq/W9No+WMY+tqZeWCWLx3Ze/Pu
        J9FnT1336jCTjZqIeKTk/k0R4y4yILV2uqoqlVRJtSwlddJYzsfF8F8MfpJiqVmrdceaT+ZJZL4U/vZc
        RThrJc+LfcXB0NPr8N5MF2HU3xM4qX/dpYLPYMHb6B11Q1Hpzl4J7V3mOuVleiq6o6b9uEW0pPtfll7d
        jMYqt1qlWw/UUvlmn/hlvTW9MvKPLWzi4zjZBuqGdtX4q2/xwe+LOiOVqejX6ppxkpUS/t2LZL3PsNTo
        T1/siquhT1TcnLZhlgT2Yhn+zdC/LOSL7MV7P2TS8eW5ovtMeZ6jobNFqpUWZuOx8Ubl1FUoAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAndk7MFtS2cF3Igu6bQ4PnueGWLWODw7X+H7SWqnjqrLPka
        NKMYea3ZGPFr+MSYJtFR6nOtPP06or/Va+f1qAos3a2qupabTR9LTx8XLLa3/wByzt4RJgqK7L1Z7E/l
        xe1v4mUVLtRKUni8W82yjSMwiSNrWxhUi1U1vGDb9ZImCxpupTrshNPysWD2NPUf1GkjZjjyrlsXGL9x
        yxVrQ9Vmuam1ufIkprHOdb8sl2r7SWK5vXKL4SVtEsHhzU24ZNPc+zc0a5Suh+1FXfQ7OTkhB/P0z2KS
        /FHsM9rHY6mq/RTrfNF/SuxmYOLJcDSNCjzX7w6b6lC1cF4oebuN8VK8adUAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAdSPoaWPM/Nhk35n3L8K7dplWmNmojz2y9HSx3b37wixp6v1NblL/TdNq80t
        83w7WxVT6jW8yjTVFVVV51Ubor47OMiYKkZKxttv0ovFt7ZPiURX6hyeOzdFcEEQKRRspAbKYGecBzgZ
        jPcB3+g9RaXJJ5PJpmOosdG22dc+atY20Z1xf463ti+9GVdDT6qjUVRqm/kXeKmx/hbyz7Nz+kmDs16b
        9PXD0fBOGS71ufExqtPUm8bavMv7tT2excAMQ0r1Lb0yxaTlKtvZhwLoqP8AhlRDqaY20zqmsYzWAg+a
        a/T/AKfWW07VCWR3lZVygAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxQjX83Uvmm/LX7yCzT
        Q7o/qta+TTR8la2y4JIittTrLLJRXKo8v9iheWC4vtEgqYucnCLxTeM5v8T9xUZsvi/BHKEdvawK8pNv
        EAmBnEDKkBnmAcwBSzAtaLUOu4lHo/1HPRG2L8de1cY7zCtKb41Xem38nUvmre6NnukgPW9B1/6vTvS2
        /wDsUrwY7ZQW7+qJz6jUTXQkpqcHhNZp8UQRczfzavBYvPBfaijVqNucfDZvjufcByOudThoNJKX+ZLK
        Me01zNSvnd1k7bZWSeMpPFndloAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADo06eEF+q1jxX
        4K98mZ0L9VbOxSksbdlVa8sF7xgrtvOEXzSl/cnx7EULJ8kfTjte1gV29xQTaA2UkBnEBiBnEgYgMQNl
        LBqQHa6bq8lF547uJmxU1ijJT078sljW+zavrILXSeqW1WwucsNRp5KN7W9fhn7d5LB7aWt0epoWohZF
        bPVj8Mnv7mcsaVLLaubmhZHnW3B7SiO7UUelK+MkpQWM4p/YXEeB6z1WPVtVLmfI45VPc+87czEcicJQ
        k4yWDRpGoGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt232OfPPxWvKMVsiiCJtxxinjOXnl
        9wGcVXH824CFva97KMAAAGQHMwM8zAczAxzMBiwLeku5WiUdWybspU45zr8S7t6Mqhnc4Tjq6/FgsLY/
        FB7QLlOrdFkZ1vmqnHy7p1vbF9qJgj1kZwcZVWP0p50Txez4WWDmai7VJucLJJrzwxNIgnGN8XZBYWLO
        cOPagL3QOm29Y19ejflXinZvjFbSdXIsfS1+1OgKEa5aKtqKwUsM3h2nD3WseA/dH7dfT+qThRXhprVz
        04blvXsZ2462M2OM9Favws1qILK5Qlg1gUaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJW+Ttse1
        8AEcIrmYEcpNvFgYAAAAAAAAAAAG0JYSA6mkv4+z7zNVs2q7ZQ2wlnHHZgwNKZcknppPCMnzUSe58ALO
        n1EXGWnvyqsef5J8SWCtqarIWOL/ALkf+ZFgo2R5X6leXFcCo6PQOpy0XVKdXDLB4XwW+D2k6mxY+o6b
        9x9DtajDWVS7HLB/Wee81rXP6jJa212uKlTDw1pr6zU/BSn06jDGVKw44F1Hl/3B05QcuVYb4nTmpXmz
        aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG8VvYGJSxfYBqAAAAAAAAAAAAACxprXF7faSi5Y3OrF
        eaGce7gRUU/m1ZZSjnF9v8ZFRlWqyv1H5l4bV95BZjP9RV6Un86tY1S+KPAKo2JpuSWD2TiVEDThJThs
        KOv0a2l6qM5LPFYox0se70UoO2HN5HsOVV1LlD0pY4cuBlXl+sUV2U5vB54dx05R427ps3bLkksMTrrK
        G3p91ceaWa7Bo1VA0P0/YNGroGjSVbRRqBgAAAAAAAAAAAAAAAAAAAAAAAAAAAADZy3AagAAAAAAAAAA
        AAAAZi8GBcotyWOeG1cVvINZP0rWtsXmu5gJy9Oz1FnGWU1xT3gZ5nGS5Xhh4q5AS3SVsPXisJrK2Pbx
        IKk/DmvK9qKNtPY6rFKLyxFHsundZpenirH4o70c7y0vw6vVZ4edtcDPkcfqmtdk3GP0dhqRFKuvHaaF
        iWjc63FxeDXAmjmS00oScZLBo1o19FAYdIEU6QirbVgUQFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAkrm00BLPx19sM13EGISUouD/AIQGqbS9N7VnFlG1dzhLnSyeU48UQZugovGLxrnnF/cB
        A8U8CjaN1sPLJpAW9Fr7o28spZSyJYOnBOTxeZlXS6do/VsTa8K2mbR6fTaKLisUc7WkOq6bTZJ+FZrB
        llR5jqHTHROSW7Z3HSVHNNDEopoCrdAIo2RwZoaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAGUBLCzBp/T3AaSxhPLvTA2n4kpIDXmzx+kCSuawdc/JLY+DINJxabjLaiiMDKxxWG0D0GhuhZVFy
        aUt6MVXqeiqqdSUcMVtOfSu9KSrrUY7WYVABzesVVzgn+P7jfKPJamvktaOkRFgURWwAo317SoqlAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAymBu/FDtj9gGIPdx2d4GHk+wDC2YfQBIn6kMH5
        47HxQEbAzDzAXqEZHa6Nq/Q1CTeEJZMz1FeyovhZBNST9pyrTeyyMIOTewDja3U5SlJ5s3Ijzeonz2tm
        4iIoxJYoCnfEIozXiZoagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADaLwfZvAxJYP7A
        MvNY794GoGcXtW1AbSwkuZbfxIDWLwkgLtEthBdhLJPeiK6Gl6jKtYNtGbBb/wB3TWciYqlqtdK3JFkR
        TNABibSQFO6W0Ioz8zNDUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM7V3AE/o3gGB
        gDKeDANYPFbNwE9MyC9TPIipgMoAAAAQ2zAo3WFRWKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAZQAABgABkDMJYMC5TYsiC3CxNEVumgMgMUBHZYsMAKl1hUU5yxZRqAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkDAAAAAASV2OOQFmF3aQSK/tINlf2hR3doEM7stpUVrLMWU
        RgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG8PaBIvaQbL2gGBFZ7Si
        MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//9k=
</value>
  </data>
</root>